// <auto-generated />
using System;
using IPM.Infrastructure.EntityFrameworkDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IPM_winform.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250429074825_InitialMig")]
    partial class InitialMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.AffiliatedUnit", b =>
                {
                    b.Property<int>("AffiliatedUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AffiliatedUnitId"));

                    b.Property<string>("AffiliatedUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AffiliatedUnitId");

                    b.ToTable("AffiliatedUnits");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.ApprovingAgency", b =>
                {
                    b.Property<int>("ApprovingAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovingAgencyId"));

                    b.Property<string>("ApprovingAgencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ApprovingAgencyId");

                    b.ToTable("ApprovingAgencies");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Counterparty", b =>
                {
                    b.Property<int>("CounterpartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CounterpartyId"));

                    b.Property<string>("CounterpartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CounterpartyId");

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Participation", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Owner")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int?>("AffiliatedUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovingAgencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectNameEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNameVietnamese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("AffiliatedUnitId");

                    b.HasIndex("ApprovingAgencyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AffiliatedUnitId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VerificationValidTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VerifiedCodeEmail")
                        .HasColumnType("int");

                    b.Property<int>("VerifiedStatus")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AffiliatedUnitId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Password = "$2a$11$8xfjLfbXdKX9wr2jv23FNuHYPkRUV6VOmQFl/3/dlgGUtpl.zMw.2",
                            Role = "Admin",
                            Sex = 0,
                            Status = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VerificationValidTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VerifiedCodeEmail = 0,
                            VerifiedStatus = 0
                        });
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.File", b =>
                {
                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId");

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Participation", b =>
                {
                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.Project", "Project")
                        .WithMany("Participations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Project", b =>
                {
                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.AffiliatedUnit", "AffiliatedUnit")
                        .WithMany()
                        .HasForeignKey("AffiliatedUnitId");

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.ApprovingAgency", "ApprovingAgency")
                        .WithMany()
                        .HasForeignKey("ApprovingAgencyId");

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId");

                    b.Navigation("AffiliatedUnit");

                    b.Navigation("ApprovingAgency");

                    b.Navigation("Category");

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.AffiliatedUnit", "AffiliatedUnit")
                        .WithMany()
                        .HasForeignKey("AffiliatedUnitId");

                    b.HasOne("IPM_winform.IPM.Infrastructure.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("AffiliatedUnit");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.Project", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("IPM_winform.IPM.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
